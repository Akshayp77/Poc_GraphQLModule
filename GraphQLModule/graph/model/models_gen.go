// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BgpConfig struct {
	BgpLocalAs     *string  `json:"BgpLocalAS,omitempty"`
	BgpRemoteAs    []string `json:"BgpRemoteAS"`
	BgpNeighbourIP []string `json:"BgpNeighbourIP"`
	BgpNetworkIP   []string `json:"BgpNetworkIP"`
}

type BgpConfigInput struct {
	BgpLocalAs     *string  `json:"BgpLocalAS,omitempty"`
	BgpRemoteAs    []string `json:"BgpRemoteAS"`
	BgpNeighbourIP []string `json:"BgpNeighbourIP"`
	BgpNetworkIP   []string `json:"BgpNetworkIP"`
}

type Mutation struct {
}

type Org struct {
	OrgID      string  `json:"OrgID"`
	OrgName    string  `json:"OrgName"`
	OrgEmail   string  `json:"OrgEmail"`
	OrgAddress string  `json:"OrgAddress"`
	OrgPhone   string  `json:"OrgPhone"`
	OrgType    OrgType `json:"OrgType"`
	OrgUser    []*User `json:"OrgUser"`
	CreatedAt  string  `json:"CreatedAt"`
	UpdatedAt  string  `json:"UpdatedAt"`
}

type OspfConfig struct {
	OspfRouterID       *string  `json:"OspfRouterID,omitempty"`
	OspfRedistribution *bool    `json:"OspfRedistribution,omitempty"`
	OspfNetwork        []string `json:"OspfNetwork"`
	OspfArea           []string `json:"OspfArea"`
}

type OspfConfigInput struct {
	OspfRouterID       *string  `json:"OspfRouterID,omitempty"`
	OspfRedistribution *bool    `json:"OspfRedistribution,omitempty"`
	OspfNetwork        []string `json:"OspfNetwork"`
	OspfArea           []string `json:"OspfArea"`
}

type Query struct {
}

type Router struct {
	ID             string       `json:"id"`
	Name           string       `json:"name"`
	Status         RouterStatus `json:"status"`
	CreatedAt      string       `json:"createdAt"`
	UpdatedAt      string       `json:"updatedAt"`
	DeploymentType string       `json:"deploymentType"`
}

type RouterConfig struct {
	Ospf *OspfConfig `json:"ospf,omitempty"`
	Bgp  *BgpConfig  `json:"bgp,omitempty"`
}

type RouterConfigInput struct {
	Ospf *OspfConfigInput `json:"ospf,omitempty"`
	Bgp  *BgpConfigInput  `json:"bgp,omitempty"`
}

type User struct {
	UserID    string   `json:"userID"`
	UserName  string   `json:"userName"`
	UserEmail string   `json:"userEmail"`
	UserRole  UserRole `json:"userRole"`
}

type UserInput struct {
	UserID    string   `json:"userID"`
	UserName  string   `json:"userName"`
	UserEmail string   `json:"userEmail"`
	UserRole  UserRole `json:"userRole"`
}

type OrgType string

const (
	OrgTypeSaasorg  OrgType = "SAASORG"
	OrgTypeClient   OrgType = "CLIENT"
	OrgTypeReseller OrgType = "RESELLER"
)

var AllOrgType = []OrgType{
	OrgTypeSaasorg,
	OrgTypeClient,
	OrgTypeReseller,
}

func (e OrgType) IsValid() bool {
	switch e {
	case OrgTypeSaasorg, OrgTypeClient, OrgTypeReseller:
		return true
	}
	return false
}

func (e OrgType) String() string {
	return string(e)
}

func (e *OrgType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgType", str)
	}
	return nil
}

func (e OrgType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RouterStatus string

const (
	RouterStatusActive      RouterStatus = "ACTIVE"
	RouterStatusInactive    RouterStatus = "INACTIVE"
	RouterStatusMaintenance RouterStatus = "MAINTENANCE"
)

var AllRouterStatus = []RouterStatus{
	RouterStatusActive,
	RouterStatusInactive,
	RouterStatusMaintenance,
}

func (e RouterStatus) IsValid() bool {
	switch e {
	case RouterStatusActive, RouterStatusInactive, RouterStatusMaintenance:
		return true
	}
	return false
}

func (e RouterStatus) String() string {
	return string(e)
}

func (e *RouterStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RouterStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RouterStatus", str)
	}
	return nil
}

func (e RouterStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin    UserRole = "ADMIN"
	UserRoleEngineer UserRole = "ENGINEER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleEngineer,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleEngineer:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
