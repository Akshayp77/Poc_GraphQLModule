package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"GraphQLModule/graph/model"
	"context"
	"fmt"
)

// CreateOrg is the resolver for the createOrg field.
func (r *mutationResolver) CreateOrg(ctx context.Context, orgID string, orgName string, orgEmail string, orgAddress string, orgPhone string, orgType model.OrgType, createdAt string, updatedAt string) (*model.Org, error) {
	// Your implementation logic goes here
    // Your implementation logic goes here

    // Placeholder implementation
    newOrg := createOrg(orgID, orgName, orgEmail, orgAddress, orgPhone, orgType, createdAt, updatedAt)

    // Placeholder print statement
    fmt.Println("Organization Created:")
    fmt.Println("Organization ID:", newOrg.OrgID)
    fmt.Println("Organization Name:", newOrg.OrgName)
    fmt.Println("Organization Email:", newOrg.OrgEmail)
    fmt.Println("Organization Address:", newOrg.OrgAddress)
    fmt.Println("Organization Phone:", newOrg.OrgPhone)
    fmt.Println("Organization Type:", newOrg.OrgType)
    fmt.Println("Created At:", newOrg.CreatedAt)
    fmt.Println("Updated At:", newOrg.UpdatedAt)

    return newOrg, nil
}

// UpdateClientOrg is the resolver for the updateClientOrg field.
func (r *mutationResolver) UpdateClientOrg(ctx context.Context, orgID string, orgName string, orgEmail string, orgAddress string, orgPhone string, orgType model.OrgType, createdAt string, updatedAt string) (*model.Org, error) {
	panic(fmt.Errorf("not implemented: UpdateClientOrg - updateClientOrg"))
}

// UpdateOwnOrg is the resolver for the updateOwnOrg field.
func (r *mutationResolver) UpdateOwnOrg(ctx context.Context, orgID string, orgName string, orgEmail string, orgAddress string, orgPhone string, orgType model.OrgType, createdAt string, updatedAt string) (*model.Org, error) {
	panic(fmt.Errorf("not implemented: UpdateOwnOrg - updateOwnOrg"))
}

// ViewOrg is the resolver for the viewOrg field.
func (r *mutationResolver) ViewOrg(ctx context.Context, orgID string) (*model.Org, error) {
	panic(fmt.Errorf("not implemented: ViewOrg - viewOrg"))
}

// DeleteOrg is the resolver for the deleteOrg field.
func (r *mutationResolver) DeleteOrg(ctx context.Context, orgID string) (*model.Org, error) {
	panic(fmt.Errorf("not implemented: DeleteOrg - deleteOrg"))
}

// ViewOwnOrgUser is the resolver for the viewOwnOrgUser field.
func (r *mutationResolver) ViewOwnOrgUser(ctx context.Context, orgID string) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: ViewOwnOrgUser - viewOwnOrgUser"))
}

// ViewClientOrgUser is the resolver for the viewClientOrgUser field.
func (r *mutationResolver) ViewClientOrgUser(ctx context.Context, orgID string) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: ViewClientOrgUser - viewClientOrgUser"))
}

// AddOrgUser is the resolver for the addOrgUser field.
func (r *mutationResolver) AddOrgUser(ctx context.Context, orgID string, orgUser model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: AddOrgUser - addOrgUser"))
}

// UpdateOrgUser is the resolver for the updateOrgUser field.
func (r *mutationResolver) UpdateOrgUser(ctx context.Context, orgID string, orgUser model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateOrgUser - updateOrgUser"))
}

// DeleteOrgUser is the resolver for the deleteOrgUser field.
func (r *mutationResolver) DeleteOrgUser(ctx context.Context, orgID string, orgUser model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteOrgUser - deleteOrgUser"))
}

// UpdateOwnProfile is the resolver for the UpdateOwnProfile field.
func (r *mutationResolver) UpdateOwnProfile(ctx context.Context, orgID string, orgUser model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateOwnProfile - UpdateOwnProfile"))
}

// AddRouter is the resolver for the addRouter field.
func (r *mutationResolver) AddRouter(ctx context.Context, name string, deploymentType string) (*model.Router, error) {
	panic(fmt.Errorf("not implemented: AddRouter - addRouter"))
}

// DeleteRouter is the resolver for the deleteRouter field.
func (r *mutationResolver) DeleteRouter(ctx context.Context, id string) (*model.Router, error) {
	panic(fmt.Errorf("not implemented: DeleteRouter - deleteRouter"))
}

// UpdateRouterConfig is the resolver for the updateRouterConfig field.
func (r *mutationResolver) UpdateRouterConfig(ctx context.Context, configInput *model.RouterConfigInput) (*model.RouterConfig, error) {
	panic(fmt.Errorf("not implemented: UpdateRouterConfig - updateRouterConfig"))
}

// ListRouters is the resolver for the listRouters field.
func (r *queryResolver) ListRouters(ctx context.Context) ([]*model.Router, error) {
	panic(fmt.Errorf("not implemented: ListRouters - listRouters"))
}

// ListOrgs is the resolver for the listOrgs field.
func (r *queryResolver) ListOrgs(ctx context.Context) ([]*model.Org, error) {
	panic(fmt.Errorf("not implemented: ListOrgs - listOrgs"))
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: ListUsers - listUsers"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
